{"version":3,"file":"static/js/808.01c92b5e.chunk.js","mappings":"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","sources":["hooks/use-http.js","lib/api.js","webpack://react-complete-guide/./src/components/quotes/QuoteItem.module.css?127c","components/quotes/QuoteItem.js","webpack://react-complete-guide/./src/components/quotes/QuoteList.module.css?9d5d","components/quotes/QuoteList.js","webpack://react-complete-guide/./src/components/quotes/NoQuotesFound.module.css?2c4b","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"sourcesContent":["import { useReducer, useCallback } from \"react\";\n\nfunction httpReducer(state, action) {\n  if (action.type === \"SEND\") {\n    return {\n      data: null,\n      error: null,\n      status: \"pending\",\n    };\n  }\n\n  if (action.type === \"SUCCESS\") {\n    return {\n      data: action.responseData,\n      error: null,\n      status: \"completed\",\n    };\n  }\n\n  if (action.type === \"ERROR\") {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: \"completed\",\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? \"pending\" : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: \"SEND\" });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: \"SUCCESS\", responseData });\n      } catch (error) {\n        dispatch({\n          type: \"ERROR\",\n          errorMessage: error.message || \"Something went wrong!\",\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://quotes-73287-default-rtdb.firebaseio.com/';\n\nexport async function getAllQuotes() {\n  const response = await fetch(FIREBASE_DOMAIN + 'quotes.json');\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(\n    FIREBASE_DOMAIN + '/comments/' + requestData.quoteid + '.json',\n    {\n      method: 'POST',\n      body: JSON.stringify(requestData.commentData),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n\nexport async function DeleteQuote(props) {\n  const res = await fetch(\n    `https://quotes-73287-default-rtdb.firebaseio.com/comments/${props}.json`,\n    {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n\n  if (!res.ok) {\n    throw new Error('Could not detele quote.');\n  }\n\n  const responce = await fetch(\n    `https://quotes-33a21-default-rtdb.firebaseio.com/quotes/${props}.json`,\n    {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n\n  if (!responce.ok) {\n    throw new Error('Could not detele quote.');\n  }\n\n  return true;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"QuoteItem_item__ywGc0\"};","import classes from './QuoteItem.module.css';\nimport { Link } from 'react-router-dom';\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link className=\"btn\" to={`/quotes/${props.id}`}>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"QuoteList_list__ux8TQ\",\"sorting\":\"QuoteList_sorting__kQaMQ\"};","import { Fragment } from 'react';\nimport { useHistory, useLocation, useRouteMatch } from 'react-router-dom';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const match = useRouteMatch();\n  const History = useHistory();\n  const Location = useLocation();\n\n  const queryParams = new URLSearchParams(Location.search);\n\n  const isSortingAscending = queryParams.get('sort') === 'asc';\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const changeSortingHandler = () => {\n    History.push(`${match.url}?sort=${isSortingAscending ? 'desc' : 'asc'}`);\n  };\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {isSortingAscending ? 'Descending' : 'Ascending'}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","// extracted by mini-css-extract-plugin\nexport default {\"noquotes\":\"NoQuotesFound_noquotes__jd5UV\"};","import { Link } from \"react-router-dom\";\n\nimport classes from \"./NoQuotesFound.module.css\";\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className=\"btn\" to=\"/new-quote\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { Fragment, useEffect } from 'react';\n\nimport QuoteList from '../components/quotes/QuoteList';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\nimport useHttp from '../hooks/use-http';\nimport { getAllQuotes } from '../lib/api';\n\nconst AllQuotes = () => {\n  const {\n    sendRequest,\n    status,\n    data: loadedQuotes,\n    error,\n  } = useHttp(getAllQuotes, true);\n\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n\n  if (status === 'pending') {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className=\"centered\">{error}</p>;\n  }\n\n  if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\n    return <NoQuotesFound />;\n  }\n\n  return (\n    <Fragment>\n      <QuoteList quotes={loadedQuotes} />\n    </Fragment>\n  );\n};\n\nexport default AllQuotes;\n"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","message","FIREBASE_DOMAIN","getAllQuotes","fetch","response","json","ok","Error","key","transformedQuotes","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","quoteid","commentData","commentId","name","getAllComments","transformedComments","commentObj","DeleteQuote","props","className","classes","text","author","to","quotes","ascending","match","useRouteMatch","History","useHistory","Location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","Fragment","onClick","url","map","quote","useHttp","loadedQuotes","useEffect","LoadingSpinner","length"],"sourceRoot":""}