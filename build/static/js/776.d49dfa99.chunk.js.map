{"version":3,"file":"static/js/776.d49dfa99.chunk.js","mappings":"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","sources":["hooks/use-http.js","lib/api.js","webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","pages/QuoteDetails.js"],"sourcesContent":["import { useReducer, useCallback } from \"react\";\n\nfunction httpReducer(state, action) {\n  if (action.type === \"SEND\") {\n    return {\n      data: null,\n      error: null,\n      status: \"pending\",\n    };\n  }\n\n  if (action.type === \"SUCCESS\") {\n    return {\n      data: action.responseData,\n      error: null,\n      status: \"completed\",\n    };\n  }\n\n  if (action.type === \"ERROR\") {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: \"completed\",\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? \"pending\" : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: \"SEND\" });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: \"SUCCESS\", responseData });\n      } catch (error) {\n        dispatch({\n          type: \"ERROR\",\n          errorMessage: error.message || \"Something went wrong!\",\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://quotes-73287-default-rtdb.firebaseio.com/';\n\nexport async function getAllQuotes() {\n  const response = await fetch(FIREBASE_DOMAIN + 'quotes.json');\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(\n    FIREBASE_DOMAIN + '/comments/' + requestData.quoteid + '.json',\n    {\n      method: 'POST',\n      body: JSON.stringify(requestData.commentData),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n\nexport async function DeleteQuote(props) {\n  const res = await fetch(\n    `https://quotes-73287-default-rtdb.firebaseio.com/comments/${props}.json`,\n    {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n\n  if (!res.ok) {\n    throw new Error('Could not detele quote.');\n  }\n\n  const responce = await fetch(\n    `https://quotes-33a21-default-rtdb.firebaseio.com/quotes/${props}.json`,\n    {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n\n  if (!responce.ok) {\n    throw new Error('Could not detele quote.');\n  }\n\n  return true;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__ZiAg9\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__WXILh\",\"loading\":\"NewCommentForm_loading__YuESJ\",\"control\":\"NewCommentForm_control__bK7EZ\",\"actions\":\"NewCommentForm_actions__MqDjy\"};","import { useRef, useEffect } from 'react';\n\nimport classes from './NewCommentForm.module.css';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddComment } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddComment();\n    }\n  }, [status, onAddComment, error]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const EnteredText = commentTextRef.current.value;\n    sendRequest({\n      commentData: {\n        text: EnteredText,\n      },\n      quoteid: props.quoteId,\n    });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__2TOK1\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__neocc\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useCallback, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\n\nconst Comments = (props) => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const quoteId = params.quoteId;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentsHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  let comments;\n  if (status === 'pending') {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if (status === 'completed' && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n  if (\n    status === 'completed' &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No Comments Found.</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={params.quoteId}\n          onAddComment={addedCommentsHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__dgcSt\",\"button\":\"HighlightedQuote_button__HrXEh\"};","import { Fragment, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport useHttp from '../../hooks/use-http';\nimport { DeleteQuote } from '../../lib/api';\n\nimport classes from './HighlightedQuote.module.css';\nconst HighlightedQuote = (props) => {\n  const history = useHistory();\n  const [isLoading, setIsLoading] = useState(false);\n  const { sendRequest, status, error } = useHttp(DeleteQuote, false);\n\n  const deletionHandler = () => {\n    console.log('delete ' + props.id);\n    setIsLoading(true);\n    sendRequest(props.id);\n    setIsLoading(false);\n    history.push('/new-quote');\n  };\n\n  if (status === 'pending') {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className=\"centered\">{error}</p>;\n  }\n\n  return (\n    <Fragment>\n      {isLoading && <LoadingSpinner />}\n      <figure className={classes.quote}>\n        <p>{props.text}</p>\n        <figcaption>{props.author}</figcaption>\n        <button className={classes.button} onClick={deletionHandler}>\n          Delete\n        </button>\n      </figure>\n    </Fragment>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect, useState, useCallback } from 'react';\nimport { useParams, Route, NavLink, useRouteMatch } from 'react-router-dom';\n\nimport Comments from '../components/comments/Comments';\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport useHttp from '../hooks/use-http';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\nimport { getSingleQuote } from '../lib/api';\n\nconst QuoteDetails = (props) => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const match = useRouteMatch();\n  const params = useParams();\n  const { quoteId } = params;\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error,\n  } = useHttp(getSingleQuote, true);\n\n  const addedCommentsHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    sendRequest(quoteId);\n    setIsLoading(false);\n  }, [sendRequest, quoteId]);\n\n  if (status === 'pending') {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className=\"centered\">{error}</p>;\n  }\n\n  if (!loadedQuote.text) {\n    return <p>No Quote Found</p>;\n  }\n\n  return (\n    <Fragment>\n      {isLoading && <LoadingSpinner />}\n      <HighlightedQuote\n        text={loadedQuote.text}\n        author={loadedQuote.author}\n        id={loadedQuote.id}\n      />\n      <div className=\"centered\">\n        <Route path={match.path} exact>\n          <NavLink className=\"btn--flat\" to={`${match.url}/comments`}>\n            Load Comments\n          </NavLink>\n        </Route>\n      </div>\n      <Route path={`${match.path}/comments/`}>\n        <Comments quote={loadedQuote} onAddComment={addedCommentsHandler} />\n        <div className=\"centered\">\n          <NavLink className=\"btn--flat\" to={`${match.url}`}>\n            Hide Comments\n          </NavLink>\n        </div>\n      </Route>\n    </Fragment>\n  );\n};\n\nexport default QuoteDetails;\n"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","message","FIREBASE_DOMAIN","getAllQuotes","fetch","response","json","ok","Error","key","transformedQuotes","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","quoteid","commentData","commentId","name","getAllComments","transformedComments","commentObj","DeleteQuote","props","commentTextRef","useRef","useHttp","onAddComment","useEffect","submitFormHandler","event","preventDefault","EnteredText","current","value","text","className","classes","onSubmit","LoadingSpinner","htmlFor","rows","ref","comments","map","comment","useState","isAddingComment","setIsAddingComment","params","useParams","loadedComments","addedCommentsHandler","length","onClick","history","useHistory","isLoading","setIsLoading","Fragment","author","console","log","match","useRouteMatch","path","exact","to","url","quote"],"sourceRoot":""}